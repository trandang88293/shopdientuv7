package com.fpoly.duan.shopdientuv2.controllers;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.DefaultMessageSourceResolvable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import com.fpoly.duan.shopdientuv2.beans.CategoryBean;
import com.fpoly.duan.shopdientuv2.dto.CategoryDTO;
import com.fpoly.duan.shopdientuv2.entitys.Category;
import com.fpoly.duan.shopdientuv2.reps.ResponseData;
import com.fpoly.duan.shopdientuv2.services.CategoryService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/admin/category")
public class CatagoryController {

    @Autowired
    private CategoryService categoryService;

    // üìå API l·∫•y danh s√°ch danh m·ª•c
    @GetMapping("/list")
    public ResponseEntity<ResponseData> list() {
        ResponseData responseData = new ResponseData();
        try {
            List<CategoryDTO> categoryDTOs = categoryService.Danhsach();
            responseData.setStatus(true);
            responseData.setMessage("L·∫•y danh s√°ch danh m·ª•c th√†nh c√¥ng");
            responseData.setData(categoryDTOs);
            return ResponseEntity.ok(responseData);
        } catch (Exception e) {
            responseData.setStatus(false);
            responseData.setMessage("L·ªói khi l·∫•y danh s√°ch: " + e.getMessage());
            responseData.setData(null);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    // üìå API l∆∞u danh m·ª•c (th√™m ho·∫∑c c·∫≠p nh·∫≠t)
    @PostMapping("/save")
    public ResponseEntity<ResponseData> save(@RequestBody @Valid CategoryBean categoryBean, BindingResult result) {
        ResponseData responseData = new ResponseData();
        try {
            // N·∫øu c√≥ l·ªói validation
            if (result.hasErrors()) {
                String errorMessages = result.getAllErrors().stream()
                        .map(DefaultMessageSourceResolvable::getDefaultMessage)
                        .collect(Collectors.joining(", "));
                responseData.setStatus(false);
                responseData.setMessage("L·ªói nh·∫≠p li·ªáu: " + errorMessages);
                responseData.setData(null);
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
            }

            // T·∫°o entity t·ª´ bean
            Category category = new Category();
            category.setCategoryId(categoryBean.getCategoryId());
            category.setCategoryName(categoryBean.getCategoryName());

            boolean isSaved = categoryService.save(category);

            responseData.setStatus(isSaved);
            responseData.setMessage(isSaved ? "L∆∞u danh m·ª•c th√†nh c√¥ng" : "L·ªói khi l∆∞u danh m·ª•c");
            responseData.setData(null);

            return ResponseEntity.ok(responseData);
        } catch (Exception e) {
            responseData.setStatus(false);
            responseData.setMessage("L·ªói: " + e.getMessage());
            responseData.setData(null);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    // üìå API x√≥a danh m·ª•c theo ID
    @DeleteMapping("/delete")
    public ResponseEntity<ResponseData> delete(@RequestParam Integer categoryId) {
        ResponseData responseData = new ResponseData();
        try {
            boolean isDeleted = categoryService.delete(categoryId);
            responseData.setStatus(isDeleted);
            responseData.setMessage(isDeleted ? "X√≥a danh m·ª•c th√†nh c√¥ng" : "Kh√¥ng t√¨m th·∫•y danh m·ª•c c·∫ßn x√≥a");
            responseData.setData(null);
            return ResponseEntity.ok(responseData);
        } catch (Exception e) {
            responseData.setStatus(false);
            responseData.setMessage("L·ªói khi x√≥a danh m·ª•c: " + e.getMessage());
            responseData.setData(null);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }
}
